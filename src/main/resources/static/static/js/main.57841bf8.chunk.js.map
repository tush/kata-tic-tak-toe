{"version":3,"sources":["components/Button.js","components/Header.js","components/Square.js","components/GameBoard.js","components/Game.js","components/Games.js","components/PlayerNameForm.js","App.js","reportWebVitals.js","index.js"],"names":["Button","color","text","onClick","style","backgroundColor","className","defaultProps","Header","title","addGame","player","Square","value","param","renderSwitch","GameBoard","game","onSquareClick","onJoinGame","renderSquare","posX","posY","board","status","nextPlayer","id","toast","error","handleClick","playerX","name","winner","Game","useState","showGameBoard","setShowGameBoard","getStyle","playerO","cursor","float","Games","games","map","PlayerNameForm","onSetPlayerName","setText","onSubmit","e","preventDefault","alert","type","placeholder","onChange","target","App","setPlayer","setGames","getGames","a","fetchGames","fetch","headers","rs","json","data","message","onAddPlayer","connectionRequest","method","body","JSON","stringify","resp","newPlayer","newGame","gameId","playerType","length","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.57841bf8.chunk.js","sourcesContent":["import PropTypes from \"prop-types\";\n\nfunction Button({ color, text, onClick }) {\n  return (\n    <button\n      style={{ backgroundColor: color }}\n      className=\"btn\"\n      onClick={onClick}\n    >\n      {text}\n    </button>\n  );\n}\n\nButton.defaultProps = {\n  color: \"steelblue\",\n};\n\nButton.propTypes = {\n  text: PropTypes.string.isRequired,\n  color: PropTypes.string,\n  onClick: PropTypes.func,\n};\n\nexport default Button;\n","import PropTypes from \"prop-types\";\nimport Button from \"./Button\";\n\nconst Header = ({ title, addGame, player }) => {\n  return (\n    <header className=\"header\">\n      <h1>{title}</h1>\n      {player !== null && <Button text=\"Create\" onClick={addGame} />}\n    </header>\n  );\n};\n\nHeader.defaultProps = {\n  title: \"Tic Tak Toe Game\",\n};\n\nHeader.propTypes = {\n  title: PropTypes.string.isRequired,\n};\n\nexport default Header;\n","function Square({ value, onClick }) {\n  const renderSwitch = (param) => {\n    switch (param) {\n      case 1:\n        return \"X\";\n      case 2:\n        return \"O\";\n      default:\n        return \"\";\n    }\n  };\n\n  return (\n    <button className=\"square\" onClick={onClick}>\n      {renderSwitch(value)}\n    </button>\n  );\n}\n\nexport default Square;\n","import { ToastContainer, toast } from \"react-toastify\";\nimport Square from \"./Square\";\nimport Button from \"./Button\";\n\nfunction GameBoard({ game, onSquareClick, onJoinGame, player }) {\n  const handleClick = (posX, posY) => {\n    if (\n      game.status !== \"FINISHED\" &&\n      game.status !== \"DRAW\" &&\n      game[\"player\" + game.nextPlayer]?.id === player.id &&\n      game.board[posX][posY] === 0\n    ) {\n      onSquareClick(posX, posY, game.id, game.nextPlayer);\n    } else {\n        toast.error(\"Not allowed. Game Finished or Drawn. Or not your turn.\");\n    }\n  };\n\n  const renderSquare = (posX, posY) => {\n    return (\n      <Square\n        value={game.board[posX][posY]}\n        onClick={() => handleClick(posX, posY)}\n      />\n    );\n  };\n\n  return (\n    <div className=\"game-board\">\n      {game.status === \"NEW\" && player.id !== game.playerX.id && (\n        <Button text=\"Join\" onClick={() => onJoinGame(game.id)} />\n      )}\n      <div className=\"status\">\n        {game.status === \"IN_PROGRESS\" && (\n          <p>Next Player: {game[\"player\" + game.nextPlayer]?.name}</p>\n        )}\n        {game?.winner && <p>Winner: {game?.winner}</p>}\n        {(game.status === \"FINISHED\" || game.status === \"DRAW\") && (\n          <p>Status: {game?.status}</p>\n        )}\n      </div>\n      <div className=\"board-row\">\n        {renderSquare(0, 0)}\n        {renderSquare(0, 1)}\n        {renderSquare(0, 2)}\n      </div>\n      <div className=\"board-row\">\n        {renderSquare(1, 0)}\n        {renderSquare(1, 1)}\n        {renderSquare(1, 2)}\n      </div>\n      <div className=\"board-row\">\n        {renderSquare(2, 0)}\n        {renderSquare(2, 1)}\n        {renderSquare(2, 2)}\n      </div>\n    </div>\n  );\n}\n\nexport default GameBoard;\n","import { useState } from \"react\";\nimport { FaAngleDown, FaAngleUp } from \"react-icons/fa\";\nimport GameBoard from \"./GameBoard\";\n\nfunction Game({ game, onJoinGame, onSquareClick, player }) {\n  const [showGameBoard, setShowGameBoard] = useState(false);\n\n  const getStyle = (param) => {\n    switch (param) {\n      case \"IN_PROGRESS\":\n        return \"in-progress\";\n      case \"FINISHED\":\n        return \"finished\";\n      case \"NEW\":\n        return \"new\";\n      case \"DRAW\":\n        return \"draw\";\n      default:\n        return \"\";\n    }\n  };\n  return (\n    <>\n      <div className={`game ${getStyle(game.status)} `}>\n        <p>\n          <span>Player X: {game?.playerX?.name}</span>\n          <span>Player O: {game?.playerO?.name}</span>\n\n          {!showGameBoard ? (\n            <FaAngleDown\n              style={{ cursor: \"pointer\", float: \"right\" }}\n              onClick={() => setShowGameBoard(!showGameBoard)}\n            />\n          ) : (\n            <FaAngleUp\n              style={{ cursor: \"pointer\", float: \"right\" }}\n              onClick={() => setShowGameBoard(!showGameBoard)}\n            />\n          )}\n        </p>\n      </div>\n      <div>\n        {showGameBoard && (\n          <GameBoard\n            game={game}\n            onSquareClick={onSquareClick}\n            onJoinGame={onJoinGame}\n            player={player}\n          />\n        )}\n      </div>\n    </>\n  );\n}\n\nexport default Game;\n","import Game from \"./Game\";\n\nfunction Games({ games, onJoinGame, onSquareClick, player }) {\n  return (\n    <>\n      {games.map((game) => (\n        <Game\n          key={game.id}\n          game={game}\n          onJoinGame={onJoinGame}\n          onSquareClick={onSquareClick}\n          player={player}\n        />\n      ))}\n    </>\n  );\n}\n\nexport default Games;\n","import { useState } from \"react\";\n\nfunction PlayerNameForm({ onSetPlayerName }) {\n  const [text, setText] = useState(\"\");\n\n  const onSubmit = (e) => {\n    e.preventDefault();\n    if (!text) {\n      alert(\"Add Text\");\n      return;\n    }\n    onSetPlayerName(text);\n  };\n\n  return (\n    <form className=\"add-form\" onSubmit={onSubmit}>\n      <div className=\"form-control\">\n        <label>Player Name</label>\n        <input\n          type=\"text\"\n          placeholder=\"Add Name\"\n          onChange={(e) => setText(e.target.value)}\n        />\n      </div>\n      <input type=\"submit\" className=\"btn btn-block\" value=\"Submit\" />\n    </form>\n  );\n}\n\nexport default PlayerNameForm;\n","import { useState } from \"react\";\nimport { FaSyncAlt } from \"react-icons/fa\";\nimport { ToastContainer, toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\n\nimport \"./App.css\";\nimport Header from \"./components/Header\";\nimport Games from \"./components/Games\";\nimport PlayerNameForm from \"./components/PlayerNameForm\";\n\nfunction App() {\n  const [player, setPlayer] = useState(null);\n  const [games, setGames] = useState([]);\n\n  const getGames = async () => {\n    const games = await fetchGames();\n    setGames(games);\n  };\n\n  const fetchGames = async () => {\n    try {\n      const rs = await fetch(`/game/games`, {\n        headers: {\n          \"Content-type\": \"application/json\",\n        },\n      });\n      const data = await rs.json();\n      return data;\n    } catch (error) {\n      toast.error(error.message);\n    }\n  };\n\n  const onAddPlayer = async (name) => {\n    const connectionRequest = {\n      player: { name },\n    };\n    try {\n      const resp = await fetch(`/player/add`, {\n        method: \"POST\",\n        headers: {\n          \"Content-type\": \"application/json\",\n        },\n        body: JSON.stringify(connectionRequest),\n      });\n      const newPlayer = await resp.json();\n      setPlayer(newPlayer);\n      getGames();\n    } catch (error) {\n      toast.error(error.message);\n    }\n  };\n\n  const addGame = async () => {\n    const connectionRequest = {\n      player: player,\n    };\n    try {\n      const resp = await fetch(`/game/start`, {\n        method: \"POST\",\n        headers: {\n          \"Content-type\": \"application/json\",\n        },\n        body: JSON.stringify(connectionRequest),\n      });\n      const newGame = await resp.json();\n      setGames([...games, newGame]);\n    } catch (error) {\n      toast.error(error.message);\n    }\n  };\n\n  const onJoinGame = async (gameId) => {\n    const connectionRequest = {\n      gameId: gameId,\n      player: player,\n    };\n    try {\n      const resp = await fetch(`/game/connect`, {\n        method: \"POST\",\n        headers: {\n          \"Content-type\": \"application/json\",\n        },\n        body: JSON.stringify(connectionRequest),\n      });\n      const newGame = await resp.json();\n      setGames(\n        games.map((game) => (game.id === newGame.id ? { ...newGame } : game))\n      );\n    } catch (error) {\n      toast.error(error.message);\n    }\n  };\n\n  const onSquareClick = async (posX, posY, gameId, playerType) => {\n    const connectionRequest = {\n      gameId: gameId,\n      type: playerType,\n      posX: posX,\n      posY: posY,\n    };\n    try {\n      const resp = await fetch(`/game/play`, {\n        method: \"POST\",\n        headers: {\n          \"Content-type\": \"application/json\",\n        },\n        body: JSON.stringify(connectionRequest),\n      });\n      const newGame = await resp.json();\n      setGames(\n        games.map((game) => (game.id === newGame.id ? { ...newGame } : game))\n      );\n    } catch (error) {\n      toast.error(error.message);\n    }\n  };\n\n  return (\n    <div className=\"container\">\n      <Header player={player} addGame={addGame} />\n\n      <>\n        {!player && <PlayerNameForm onSetPlayerName={onAddPlayer} />}\n        <div>\n          {player && (\n            <>\n              <h3>\n                Games List{\" \"}\n                <FaSyncAlt\n                  style={{ cursor: \"pointer\", float: \"right\" }}\n                  onClick={() => getGames()}\n                />\n              </h3>\n\n              {player && games?.length > 0 ? (\n                <Games\n                  games={games}\n                  onJoinGame={onJoinGame}\n                  onSquareClick={onSquareClick}\n                  player={player}\n                />\n              ) : (\n                \"No games to show\"\n              )}\n            </>\n          )}\n        </div>\n        <ToastContainer />\n      </>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}